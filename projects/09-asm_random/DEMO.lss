
DEMO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000968  000009fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000968  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  0080013e  0080013e  00000a3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001990  00000000  00000000  00000b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e2d  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c8b  00000000  00000000  00003351  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f0  00000000  00000000  00003fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000759  00000000  00000000  000043cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ef4  00000000  00000000  00004b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00005a19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_18>
  4c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e3       	ldi	r26, 0x3E	; 62
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 38       	cpi	r26, 0x87	; 135
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <main>
  9e:	0c 94 b2 04 	jmp	0x964	; 0x964 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <fsm_random>:
extern uint8_t rand8_asm(uint8_t current);

/* Functions ---------------------------------------------------------*/
/* Call assembly functions to generate psudo-random values. */
void fsm_random(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <fsm_random+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <fsm_random+0x8>
  ae:	1f 92       	push	r1
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
    static uint16_t values = 0;
    static uint8_t last = 0;
    static uint8_t new = 0;
    char uart_string[5];

    switch (current_state) {
  b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  bc:	82 30       	cpi	r24, 0x02	; 2
  be:	91 05       	cpc	r25, r1
  c0:	c1 f1       	breq	.+112    	; 0x132 <fsm_random+0x8c>
  c2:	18 f4       	brcc	.+6      	; 0xca <fsm_random+0x24>
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	e9 f0       	breq	.+58     	; 0x102 <fsm_random+0x5c>
  c8:	4b c0       	rjmp	.+150    	; 0x160 <fsm_random+0xba>
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	91 05       	cpc	r25, r1
  ce:	b1 f1       	breq	.+108    	; 0x13c <fsm_random+0x96>
  d0:	04 97       	sbiw	r24, 0x04	; 4
  d2:	09 f0       	breq	.+2      	; 0xd6 <fsm_random+0x30>
  d4:	45 c0       	rjmp	.+138    	; 0x160 <fsm_random+0xba>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  d6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
  da:	4a e0       	ldi	r20, 0x0A	; 10
  dc:	be 01       	movw	r22, r28
  de:	6f 5f       	subi	r22, 0xFF	; 255
  e0:	7f 4f       	sbci	r23, 0xFF	; 255
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__itoa_ncheck>
        break;

    // Send pseudo-random value to UART
    case UART_STATE:
        itoa(new, uart_string, 10);
        uart_puts(" "); uart_puts(uart_string);
  e8:	85 e1       	ldi	r24, 0x15	; 21
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uart_puts>
  f0:	ce 01       	movw	r24, r28
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uart_puts>
        last = new;
  f8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
  fc:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <last.1829>
 100:	2f c0       	rjmp	.+94     	; 0x160 <fsm_random+0xba>
    static uint8_t new = 0;
    char uart_string[5];

    switch (current_state) {
    case IDLE_STATE:
        if (values < 20) {
 102:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <values.1828>
 106:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <values.1828+0x1>
 10a:	84 31       	cpi	r24, 0x14	; 20
 10c:	91 05       	cpc	r25, r1
 10e:	18 f4       	brcc	.+6      	; 0x116 <fsm_random+0x70>
            current_state = RAND4_STATE;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	27 c0       	rjmp	.+78     	; 0x164 <fsm_random+0xbe>
        } else if (values < 100) {
 116:	84 36       	cpi	r24, 0x64	; 100
 118:	91 05       	cpc	r25, r1
 11a:	40 f5       	brcc	.+80     	; 0x16c <fsm_random+0xc6>
            if (values == 20) {
 11c:	44 97       	sbiw	r24, 0x14	; 20
 11e:	31 f4       	brne	.+12     	; 0x12c <fsm_random+0x86>
                last = 0;
 120:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <last.1829>
                uart_puts("\r\n\r\n");
 124:	80 e1       	ldi	r24, 0x10	; 16
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uart_puts>
            }
            current_state = RAND8_STATE;
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	19 c0       	rjmp	.+50     	; 0x164 <fsm_random+0xbe>
        }
        break;

    // Call 4-bit LFSR generator
    case RAND4_STATE:
        new = rand4_asm(last);
 132:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <last.1829>
 136:	0e 94 48 04 	call	0x890	; 0x890 <rand4_asm>
 13a:	04 c0       	rjmp	.+8      	; 0x144 <fsm_random+0x9e>
        current_state = UART_STATE;
        break;

    // Call 8-bit LFSR generator
    case RAND8_STATE:
        new = rand8_asm(last);
 13c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <last.1829>
 140:	0e 94 57 04 	call	0x8ae	; 0x8ae <rand8_asm>
 144:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
        values++;
 148:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <values.1828>
 14c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <values.1828+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <values.1828+0x1>
 156:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <values.1828>
        current_state = UART_STATE;
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <fsm_random+0xbe>
        last = new;
        current_state = IDLE_STATE;
        break;

    default:
        current_state = IDLE_STATE;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    }
}
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <__vector_13>:

/* Interrupts --------------------------------------------------------*/
/* Timer1 overflow interrupt routine.
 * Update state of the FSM. */
ISR(TIMER1_OVF_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
    fsm_random();
 19e:	0e 94 53 00 	call	0xa6	; 0xa6 <fsm_random>
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 1c4:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <toggle_e+0x4>
 1cc:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
 1ce:	29 98       	cbi	0x05, 1	; 5
 1d0:	08 95       	ret

000001d2 <lcd_write>:
*                0: write instruction
*  Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data, uint8_t rs)
{
 1d2:	cf 93       	push	r28
 1d4:	c8 2f       	mov	r28, r24
    unsigned char dataBits;


    if (rs) /* write data        (RS=1, RW=0) */
 1d6:	66 23       	and	r22, r22
 1d8:	11 f0       	breq	.+4      	; 0x1de <lcd_write+0xc>
    {
        lcd_rs_high();
 1da:	28 9a       	sbi	0x05, 0	; 5
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <lcd_write+0xe>
    }
    else /* write instruction (RS=0, RW=0) */
    {
        lcd_rs_low();
 1de:	28 98       	cbi	0x05, 0	; 5
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1e0:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1e2:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1e4:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1e6:	57 9a       	sbi	0x0a, 7	; 10

        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 1e8:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 1ea:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 1ec:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 1ee:	5c 98       	cbi	0x0b, 4	; 11
        if (data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 1f0:	c7 fd       	sbrc	r28, 7
 1f2:	5f 9a       	sbi	0x0b, 7	; 11
        if (data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 1f4:	c6 fd       	sbrc	r28, 6
 1f6:	5e 9a       	sbi	0x0b, 6	; 11
        if (data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 1f8:	c5 fd       	sbrc	r28, 5
 1fa:	5d 9a       	sbi	0x0b, 5	; 11
        if (data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 1fc:	c4 fd       	sbrc	r28, 4
 1fe:	5c 9a       	sbi	0x0b, 4	; 11
        lcd_e_toggle();
 200:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <toggle_e>

        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 204:	5f 98       	cbi	0x0b, 7	; 11
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 206:	5e 98       	cbi	0x0b, 6	; 11
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 208:	5d 98       	cbi	0x0b, 5	; 11
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 20a:	5c 98       	cbi	0x0b, 4	; 11
        if (data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 20c:	c3 fd       	sbrc	r28, 3
 20e:	5f 9a       	sbi	0x0b, 7	; 11
        if (data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 210:	c2 fd       	sbrc	r28, 2
 212:	5e 9a       	sbi	0x0b, 6	; 11
        if (data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 214:	c1 fd       	sbrc	r28, 1
 216:	5d 9a       	sbi	0x0b, 5	; 11
        if (data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 218:	c0 fd       	sbrc	r28, 0
 21a:	5c 9a       	sbi	0x0b, 4	; 11
        lcd_e_toggle();
 21c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 220:	5c 9a       	sbi	0x0b, 4	; 11
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 222:	5d 9a       	sbi	0x0b, 5	; 11
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 224:	5e 9a       	sbi	0x0b, 6	; 11
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 226:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 228:	8f e3       	ldi	r24, 0x3F	; 63
 22a:	9f e1       	ldi	r25, 0x1F	; 31
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <lcd_write+0x5a>
 230:	00 c0       	rjmp	.+0      	; 0x232 <lcd_write+0x60>
 232:	00 00       	nop

        /* FRYZA: EXPERIMENTALLY ADDED FOR ARDUINO UNO */
        _delay_ms(2);
    }
} /* lcd_write */
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <lcd_read.constprop.0>:
    uint8_t data;

    if (rs)
        lcd_rs_high();  /* RS=1: read data      */
    else
        lcd_rs_low();  /* RS=0: read busy flag */
 238:	28 98       	cbi	0x05, 0	; 5
    lcd_rw_high();     /* RW=1  read mode      */
 23a:	5d 9a       	sbi	0x0b, 5	; 11
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 23c:	54 98       	cbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 23e:	55 98       	cbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 240:	56 98       	cbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 242:	57 98       	cbi	0x0a, 7	; 10

        /* read high nibble first */
        lcd_e_high();
 244:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 246:	85 e0       	ldi	r24, 0x05	; 5
 248:	8a 95       	dec	r24
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_read.constprop.0+0x10>
 24c:	00 00       	nop
        lcd_e_delay();
        data = 0;
        if (PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 24e:	4c 9b       	sbis	0x09, 4	; 9
 250:	02 c0       	rjmp	.+4      	; 0x256 <lcd_read.constprop.0+0x1e>
 252:	80 e1       	ldi	r24, 0x10	; 16
 254:	01 c0       	rjmp	.+2      	; 0x258 <lcd_read.constprop.0+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);

        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();
        data = 0;
 256:	80 e0       	ldi	r24, 0x00	; 0
        if (PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
        if (PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 258:	4d 99       	sbic	0x09, 5	; 9
 25a:	80 62       	ori	r24, 0x20	; 32
        if (PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 25c:	4e 99       	sbic	0x09, 6	; 9
 25e:	80 64       	ori	r24, 0x40	; 64
        if (PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 260:	4f 99       	sbic	0x09, 7	; 9
 262:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 264:	29 98       	cbi	0x05, 1	; 5
 266:	95 e0       	ldi	r25, 0x05	; 5
 268:	9a 95       	dec	r25
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_read.constprop.0+0x30>
 26c:	00 00       	nop

        lcd_e_delay(); /* Enable 500ns low       */

        /* read low nibble */
        lcd_e_high();
 26e:	29 9a       	sbi	0x05, 1	; 5
 270:	95 e0       	ldi	r25, 0x05	; 5
 272:	9a 95       	dec	r25
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_read.constprop.0+0x3a>
 276:	00 00       	nop
        lcd_e_delay();
        if (PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 278:	4c 99       	sbic	0x09, 4	; 9
 27a:	81 60       	ori	r24, 0x01	; 1
        if (PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 27c:	4d 99       	sbic	0x09, 5	; 9
 27e:	82 60       	ori	r24, 0x02	; 2
        if (PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 280:	4e 99       	sbic	0x09, 6	; 9
 282:	84 60       	ori	r24, 0x04	; 4
        if (PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;
 284:	4f 99       	sbic	0x09, 7	; 9
 286:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 288:	29 98       	cbi	0x05, 1	; 5
    }
    return data;
} /* lcd_read */
 28a:	08 95       	ret

0000028c <lcd_command>:
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    /* FRYZA: RW PIN NOT IMPLEMENTED ==> DO NOT USE READ FUNCTION */
    /* lcd_waitbusy(); */
    lcd_write(cmd, 0);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <lcd_write>

00000292 <lcd_data>:
*************************************************************************/
void lcd_data(uint8_t data)
{
    /* FRYZA: RW PIN NOT IMPLEMENTED ==> DO NOT USE READ FUNCTION */
    /* lcd_waitbusy(); */
    lcd_write(data, 1);
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <lcd_write>

00000298 <lcd_gotoxy>:
{
    #if LCD_LINES == 1
    lcd_command((1 << LCD_DDRAM) + LCD_START_LINE1 + x);
    #endif
    #if LCD_LINES == 2
    if (y == 0)
 298:	61 11       	cpse	r22, r1
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <lcd_gotoxy+0x8>
        lcd_command((1 << LCD_DDRAM) + LCD_START_LINE1 + x);
 29c:	80 58       	subi	r24, 0x80	; 128
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <lcd_gotoxy+0xa>
    else
        lcd_command((1 << LCD_DDRAM) + LCD_START_LINE2 + x);
 2a0:	80 54       	subi	r24, 0x40	; 64
 2a2:	0c 94 46 01 	jmp	0x28c	; 0x28c <lcd_command>

000002a6 <lcd_getxy>:
static uint8_t lcd_waitbusy(void)
{
    register uint8_t c;

    /* wait until busy flag is cleared */
    while ( (c = lcd_read(0)) & (1 << LCD_BUSY))
 2a6:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_read.constprop.0>
 2aa:	87 fd       	sbrc	r24, 7
 2ac:	fc cf       	rjmp	.-8      	; 0x2a6 <lcd_getxy>
 2ae:	85 e1       	ldi	r24, 0x15	; 21
 2b0:	8a 95       	dec	r24
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd_getxy+0xa>
 2b4:	00 00       	nop

    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0)); // return address counter
 2b6:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_read.constprop.0>
*************************************************************************/
/* FRYZA: RW PIN NOT IMPLEMENTED ==> DO NOT USE THIS FUNCTION */
int lcd_getxy(void)
{
    return lcd_waitbusy();
}
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	08 95       	ret

000002be <lcd_clrscr>:
/*************************************************************************
*  Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1 << LCD_CLR);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0c 94 46 01 	jmp	0x28c	; 0x28c <lcd_command>

000002c4 <lcd_home>:
/*************************************************************************
*  Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1 << LCD_HOME);
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	0c 94 46 01 	jmp	0x28c	; 0x28c <lcd_command>

000002ca <lcd_putc>:
     *      }
     #endif
     *      lcd_waitbusy();
     #endif
     */
    lcd_write(c, 1);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <lcd_write>

000002d0 <lcd_puts>:
*  Input:    string to be displayed
*  Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) )
 2d6:	89 91       	ld	r24, Y+
 2d8:	88 23       	and	r24, r24
 2da:	19 f0       	breq	.+6      	; 0x2e2 <lcd_puts+0x12>
    {
        lcd_putc(c);
 2dc:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_putc>
 2e0:	fa cf       	rjmp	.-12     	; 0x2d6 <lcd_puts+0x6>
    }
}/* lcd_puts */
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <lcd_puts_p>:
*  Input:     string from program memory be be displayed
*  Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 2ee:	84 91       	lpm	r24, Z
 2f0:	ef 01       	movw	r28, r30
 2f2:	21 96       	adiw	r28, 0x01	; 1
 2f4:	88 23       	and	r24, r24
 2f6:	21 f0       	breq	.+8      	; 0x300 <lcd_puts_p+0x18>
    {
        lcd_putc(c);
 2f8:	0e 94 65 01 	call	0x2ca	; 0x2ca <lcd_putc>
 2fc:	fe 01       	movw	r30, r28
 2fe:	f7 cf       	rjmp	.-18     	; 0x2ee <lcd_puts_p+0x6>
    }
}/* lcd_puts_p */
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 306:	cf 93       	push	r28
 308:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 30a:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 30c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 30e:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 310:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 312:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 314:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 316:	57 9a       	sbi	0x0a, 7	; 10
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	99 ef       	ldi	r25, 0xF9	; 249
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <lcd_init+0x16>
 320:	00 c0       	rjmp	.+0      	; 0x322 <lcd_init+0x1c>
 322:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 324:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 326:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 328:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <toggle_e>
 32c:	8f e1       	ldi	r24, 0x1F	; 31
 32e:	9e e4       	ldi	r25, 0x4E	; 78
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <lcd_init+0x2a>
 334:	00 c0       	rjmp	.+0      	; 0x336 <lcd_init+0x30>
 336:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 338:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <toggle_e>
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <lcd_init+0x3a>
 344:	00 c0       	rjmp	.+0      	; 0x346 <lcd_init+0x40>
 346:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 348:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <toggle_e>
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <lcd_init+0x4a>
 354:	00 c0       	rjmp	.+0      	; 0x356 <lcd_init+0x50>
 356:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 358:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 35a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <toggle_e>
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <lcd_init+0x5c>
 366:	00 c0       	rjmp	.+0      	; 0x368 <lcd_init+0x62>
 368:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 36a:	88 e2       	ldi	r24, 0x28	; 40
 36c:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 370:	88 e0       	ldi	r24, 0x08	; 8
 372:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 376:	0e 94 5f 01 	call	0x2be	; 0x2be <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 37a:	86 e0       	ldi	r24, 0x06	; 6
 37c:	0e 94 46 01 	call	0x28c	; 0x28c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 380:	8c 2f       	mov	r24, r28
}/* lcd_init */
 382:	cf 91       	pop	r28
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
    lcd_clrscr();                  /* display clear                */
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
    lcd_command(dispAttr);         /* display/cursor control       */
 384:	0c 94 46 01 	jmp	0x28c	; 0x28c <lcd_command>

00000388 <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	2f 93       	push	r18
 394:	8f 93       	push	r24
 396:	9f 93       	push	r25
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 39c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    data = UART0_DATA;
 3a0:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 3a4:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 3a6:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <UART_RxHead>
 3aa:	ef 5f       	subi	r30, 0xFF	; 255
 3ac:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 3ae:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <UART_RxTail>
 3b2:	e2 17       	cp	r30, r18
 3b4:	39 f0       	breq	.+14     	; 0x3c4 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 3b6:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	e9 5b       	subi	r30, 0xB9	; 185
 3be:	fe 4f       	sbci	r31, 0xFE	; 254
 3c0:	90 83       	st	Z, r25
 3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 3c4:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 3c6:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <UART_LastRxError>
 3ca:	89 2b       	or	r24, r25
 3cc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <UART_LastRxError>
}
 3d0:	ff 91       	pop	r31
 3d2:	ef 91       	pop	r30
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 3f6:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 3fa:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART_TxTail>
 3fe:	98 17       	cp	r25, r24
 400:	69 f0       	breq	.+26     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 402:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_TxTail>
 406:	ef 5f       	subi	r30, 0xFF	; 255
 408:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 40a:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	e9 59       	subi	r30, 0x99	; 153
 412:	fe 4f       	sbci	r31, 0xFE	; 254
 414:	80 81       	ld	r24, Z
 416:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 41a:	05 c0       	rjmp	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 41c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 420:	8f 7d       	andi	r24, 0xDF	; 223
 422:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    }
}
 426:	ff 91       	pop	r31
 428:	ef 91       	pop	r30
 42a:	9f 91       	pop	r25
 42c:	8f 91       	pop	r24
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <uart_init>:
 * Input:    baudrate using macro UART_BAUD_SELECT()
 * Returns:  none
 **************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 438:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxHead>
    UART_TxTail = 0;
 43c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_TxTail>
    UART_RxHead = 0;
 440:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxHead>
    UART_RxTail = 0;
 444:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART_RxTail>
    #  endif
    # endif
    #endif /* ifdef UART_TEST */

    /* Set baud rate */
    if (baudrate & 0x8000)
 448:	97 ff       	sbrs	r25, 7
 44a:	03 c0       	rjmp	.+6      	; 0x452 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1 << UART0_BIT_U2X); // Enable 2x speed
 44c:	22 e0       	ldi	r18, 0x02	; 2
 44e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
        #endif
    }
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char) ((baudrate >> 8) & 0x80);
 452:	90 78       	andi	r25, 0x80	; 128
 454:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    #endif
    UART0_UBRRL = (unsigned char) (baudrate & 0x00FF);
 458:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE) | (1 << UART0_BIT_RXEN) | (1 << UART0_BIT_TXEN);
 45c:	88 e9       	ldi	r24, 0x98	; 152
 45e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    # ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1 << UART0_BIT_URSEL) | (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
    # else
    UART0_CONTROLC = (1 << UART0_BIT_UCSZ1) | (1 << UART0_BIT_UCSZ0);
 462:	86 e0       	ldi	r24, 0x06	; 6
 464:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 468:	08 95       	ret

0000046a <uart_getc>:
    unsigned char tmptail;
    unsigned char data;
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
 46a:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <UART_RxHead>
 46e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <UART_RxTail>
 472:	98 17       	cp	r25, r24
 474:	a9 f0       	breq	.+42     	; 0x4a0 <uart_getc+0x36>
    {
        return UART_NO_DATA; /* no data available */
    }

    /* calculate buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 476:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_RxTail>
 47a:	9f 5f       	subi	r25, 0xFF	; 255
 47c:	9f 71       	andi	r25, 0x1F	; 31

    /* get data from receive buffer */
    data        = UART_RxBuf[tmptail];
 47e:	e9 2f       	mov	r30, r25
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	e9 5b       	subi	r30, 0xB9	; 185
 484:	fe 4f       	sbci	r31, 0xFE	; 254
 486:	20 81       	ld	r18, Z
    lastRxError = UART_LastRxError;
 488:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <UART_LastRxError>

    /* store buffer index */
    UART_RxTail = tmptail;
 48c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <UART_RxTail>

    UART_LastRxError = 0;
 490:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <UART_LastRxError>
    return (lastRxError << 8) + data;
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	98 2f       	mov	r25, r24
 498:	88 27       	eor	r24, r24
 49a:	82 0f       	add	r24, r18
 49c:	91 1d       	adc	r25, r1
 49e:	08 95       	ret
    unsigned char lastRxError;


    if (UART_RxHead == UART_RxTail)
    {
        return UART_NO_DATA; /* no data available */
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	91 e0       	ldi	r25, 0x01	; 1
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 4a4:	08 95       	ret

000004a6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 4a6:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
 4aa:	9f 5f       	subi	r25, 0xFF	; 255
 4ac:	9f 71       	andi	r25, 0x1F	; 31

    while (tmphead == UART_TxTail)
 4ae:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <UART_TxTail>
 4b2:	92 17       	cp	r25, r18
 4b4:	e1 f3       	breq	.-8      	; 0x4ae <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 4b6:	e9 2f       	mov	r30, r25
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	e9 59       	subi	r30, 0x99	; 153
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 4c0:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 4c4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4c8:	80 62       	ori	r24, 0x20	; 32
 4ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4ce:	08 95       	ret

000004d0 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	ec 01       	movw	r28, r24
    while (*s)
 4d6:	89 91       	ld	r24, Y+
 4d8:	88 23       	and	r24, r24
 4da:	19 f0       	breq	.+6      	; 0x4e2 <uart_puts+0x12>
        uart_putc(*s++);
 4dc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <uart_putc>
 4e0:	fa cf       	rjmp	.-12     	; 0x4d6 <uart_puts+0x6>
}/* uart_puts */
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <uart_puts_p>:
 * Purpose:  transmit string from program memory to UART
 * Input:    program memory string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts_p(const char *progmem_s)
{
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	fc 01       	movw	r30, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) )
 4ee:	84 91       	lpm	r24, Z
 4f0:	ef 01       	movw	r28, r30
 4f2:	21 96       	adiw	r28, 0x01	; 1
 4f4:	88 23       	and	r24, r24
 4f6:	21 f0       	breq	.+8      	; 0x500 <uart_puts_p+0x18>
        uart_putc(c);
 4f8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <uart_putc>
 4fc:	fe 01       	movw	r30, r28
 4fe:	f7 cf       	rjmp	.-18     	; 0x4ee <uart_puts_p+0x6>
}/* uart_puts_p */
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <twi_init>:

/* Functions ---------------------------------------------------------*/
void twi_init(void)
{
    /* Enable internal pull-up resistors */
    DDR(TWI_PORT) &= ~(_BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN));
 506:	87 b1       	in	r24, 0x07	; 7
 508:	8f 7c       	andi	r24, 0xCF	; 207
 50a:	87 b9       	out	0x07, r24	; 7
    TWI_PORT |= _BV(TWI_SDA_PIN) | _BV(TWI_SCL_PIN);
 50c:	88 b1       	in	r24, 0x08	; 8
 50e:	80 63       	ori	r24, 0x30	; 48
 510:	88 b9       	out	0x08, r24	; 8

    /* Set SCL frequency */
    TWSR &= ~(_BV(TWPS1) | _BV(TWPS0));
 512:	e9 eb       	ldi	r30, 0xB9	; 185
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	8c 7f       	andi	r24, 0xFC	; 252
 51a:	80 83       	st	Z, r24
    TWBR = TWI_BIT_RATE_REG;
 51c:	88 e9       	ldi	r24, 0x98	; 152
 51e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 522:	08 95       	ret

00000524 <twi_start>:
uint8_t twi_start(uint8_t slave_address)
{
    uint8_t twi_response;

    /* Generate start condition on TWI bus */
    TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
 524:	94 ea       	ldi	r25, 0xA4	; 164
 526:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 52a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 52e:	97 ff       	sbrs	r25, 7
 530:	fc cf       	rjmp	.-8      	; 0x52a <twi_start+0x6>

    /* Send SLA+R or SLA+W frame on TWI bus */
    TWDR = slave_address;
 532:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 536:	84 e8       	ldi	r24, 0x84	; 132
 538:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 53c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 540:	87 ff       	sbrs	r24, 7
 542:	fc cf       	rjmp	.-8      	; 0x53c <twi_start+0x18>

    /* Check TWI Status Register and mask TWI prescaler bits */
    twi_response = TWSR & 0xf8;
 544:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 548:	98 7f       	andi	r25, 0xF8	; 248
    /* Status Code 0x18: SLA+W has been transmitted and ACK received
                   0x40: SLA+R has been transmitted and ACK received */
        if (twi_response == 0x18 || twi_response == 0x40) {
 54a:	98 31       	cpi	r25, 0x18	; 24
 54c:	19 f0       	breq	.+6      	; 0x554 <twi_start+0x30>
        return 0;   /* Slave device accessible */
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 34       	cpi	r25, 0x40	; 64
 552:	09 f4       	brne	.+2      	; 0x556 <twi_start+0x32>
 554:	80 e0       	ldi	r24, 0x00	; 0
    }
    else {
        return 1;   /* Failed to access slave device */
    }
}
 556:	08 95       	ret

00000558 <twi_write>:


/*--------------------------------------------------------------------*/
void twi_write(uint8_t data)
{
    TWDR = data;
 558:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = _BV(TWINT) | _BV(TWEN);
 55c:	84 e8       	ldi	r24, 0x84	; 132
 55e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 562:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 566:	87 ff       	sbrs	r24, 7
 568:	fc cf       	rjmp	.-8      	; 0x562 <twi_write+0xa>
}
 56a:	08 95       	ret

0000056c <twi_read_ack>:


/*--------------------------------------------------------------------*/
uint8_t twi_read_ack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 56c:	84 ec       	ldi	r24, 0xC4	; 196
 56e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 572:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 576:	87 ff       	sbrs	r24, 7
 578:	fc cf       	rjmp	.-8      	; 0x572 <twi_read_ack+0x6>
	return (TWDR);
 57a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 57e:	08 95       	ret

00000580 <twi_read_nack>:


/*--------------------------------------------------------------------*/
uint8_t twi_read_nack(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN);
 580:	84 e8       	ldi	r24, 0x84	; 132
 582:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while ((TWCR & _BV(TWINT)) == 0);
 586:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 58a:	87 ff       	sbrs	r24, 7
 58c:	fc cf       	rjmp	.-8      	; 0x586 <twi_read_nack+0x6>
	return (TWDR);
 58e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 592:	08 95       	ret

00000594 <twi_stop>:


/*--------------------------------------------------------------------*/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 594:	84 e9       	ldi	r24, 0x94	; 148
 596:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 59a:	08 95       	ret

0000059c <GPIO_config_output>:
#include "gpio.h"
/*  Functions  ---------------------------------------------------------*/
void  GPIO_config_output(volatile  uint8_t *reg_name , uint8_t  pin_num)
{
    // Body of the  function
    *reg_name  |= _BV(pin_num);
 59c:	fc 01       	movw	r30, r24
 59e:	40 81       	ld	r20, Z
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <GPIO_config_output+0xc>
 5a6:	22 0f       	add	r18, r18
 5a8:	6a 95       	dec	r22
 5aa:	ea f7       	brpl	.-6      	; 0x5a6 <GPIO_config_output+0xa>
 5ac:	24 2b       	or	r18, r20
 5ae:	20 83       	st	Z, r18
 5b0:	08 95       	ret

000005b2 <GPIO_write>:
}

void  GPIO_write(volatile  uint8_t *reg_name , uint8_t  pin_num , uint8_t pin_val)
{
 5b2:	fc 01       	movw	r30, r24
    // Body of the  function
    if (pin_val == 1)
        *reg_name  |= _BV(pin_num);
 5b4:	80 81       	ld	r24, Z
 5b6:	21 e0       	ldi	r18, 0x01	; 1
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	01 c0       	rjmp	.+2      	; 0x5be <GPIO_write+0xc>
 5bc:	22 0f       	add	r18, r18
 5be:	6a 95       	dec	r22
 5c0:	ea f7       	brpl	.-6      	; 0x5bc <GPIO_write+0xa>
}

void  GPIO_write(volatile  uint8_t *reg_name , uint8_t  pin_num , uint8_t pin_val)
{
    // Body of the  function
    if (pin_val == 1)
 5c2:	41 30       	cpi	r20, 0x01	; 1
 5c4:	11 f4       	brne	.+4      	; 0x5ca <GPIO_write+0x18>
        *reg_name  |= _BV(pin_num);
 5c6:	28 2b       	or	r18, r24
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <GPIO_write+0x1c>
    else
        *reg_name  &= ~_BV(pin_num);
 5ca:	20 95       	com	r18
 5cc:	28 23       	and	r18, r24
 5ce:	20 83       	st	Z, r18
 5d0:	08 95       	ret

000005d2 <GPIO_toggle>:
}

void  GPIO_toggle(volatile  uint8_t *reg_name , uint8_t  pin_num)
{
    // Body of the  function
    *reg_name  ^= _BV(pin_num);
 5d2:	fc 01       	movw	r30, r24
 5d4:	40 81       	ld	r20, Z
 5d6:	21 e0       	ldi	r18, 0x01	; 1
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	01 c0       	rjmp	.+2      	; 0x5de <GPIO_toggle+0xc>
 5dc:	22 0f       	add	r18, r18
 5de:	6a 95       	dec	r22
 5e0:	ea f7       	brpl	.-6      	; 0x5dc <GPIO_toggle+0xa>
 5e2:	24 27       	eor	r18, r20
 5e4:	20 83       	st	Z, r18
 5e6:	08 95       	ret

000005e8 <GPIO_config_input_nopull>:
}

void  GPIO_config_input_nopull(volatile  uint8_t *reg_name , uint8_t  pin_num)
{
    *reg_name  &= _BV(pin_num + 1);
 5e8:	fc 01       	movw	r30, r24
 5ea:	40 81       	ld	r20, Z
 5ec:	6f 5f       	subi	r22, 0xFF	; 255
 5ee:	21 e0       	ldi	r18, 0x01	; 1
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <GPIO_config_input_nopull+0xe>
 5f4:	22 0f       	add	r18, r18
 5f6:	6a 95       	dec	r22
 5f8:	ea f7       	brpl	.-6      	; 0x5f4 <GPIO_config_input_nopull+0xc>
 5fa:	24 23       	and	r18, r20
 5fc:	20 83       	st	Z, r18
 5fe:	08 95       	ret

00000600 <GPIO_config_input_pullup>:
}

void  GPIO_config_input_pullup(volatile  uint8_t *reg_name , uint8_t  pin_num)
{
    *reg_name  |= _BV(pin_num + 1);
 600:	fc 01       	movw	r30, r24
 602:	40 81       	ld	r20, Z
 604:	6f 5f       	subi	r22, 0xFF	; 255
 606:	21 e0       	ldi	r18, 0x01	; 1
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	01 c0       	rjmp	.+2      	; 0x60e <GPIO_config_input_pullup+0xe>
 60c:	22 0f       	add	r18, r18
 60e:	6a 95       	dec	r22
 610:	ea f7       	brpl	.-6      	; 0x60c <GPIO_config_input_pullup+0xc>
 612:	24 2b       	or	r18, r20
 614:	20 83       	st	Z, r18
 616:	08 95       	ret

00000618 <TIM_config_prescaler>:
/* Functions ---------------------------------------------------------*/
void TIM_config_prescaler(uint8_t timer_name,
                          uint8_t presc_val)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
 618:	81 11       	cpse	r24, r1
 61a:	31 c0       	rjmp	.+98     	; 0x67e <TIM_config_prescaler+0x66>
        switch (presc_val) {
 61c:	63 30       	cpi	r22, 0x03	; 3
 61e:	f9 f0       	breq	.+62     	; 0x65e <TIM_config_prescaler+0x46>
 620:	50 f4       	brcc	.+20     	; 0x636 <TIM_config_prescaler+0x1e>
 622:	66 23       	and	r22, r22
 624:	79 f0       	breq	.+30     	; 0x644 <TIM_config_prescaler+0x2c>
 626:	61 30       	cpi	r22, 0x01	; 1
 628:	39 f5       	brne	.+78     	; 0x678 <TIM_config_prescaler+0x60>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 62a:	85 b5       	in	r24, 0x25	; 37
 62c:	8b 7f       	andi	r24, 0xFB	; 251
 62e:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS01);
 630:	85 b5       	in	r24, 0x25	; 37
 632:	82 60       	ori	r24, 0x02	; 2
 634:	0f c0       	rjmp	.+30     	; 0x654 <TIM_config_prescaler+0x3c>
void TIM_config_prescaler(uint8_t timer_name,
                          uint8_t presc_val)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (presc_val) {
 636:	65 30       	cpi	r22, 0x05	; 5
 638:	41 f0       	breq	.+16     	; 0x64a <TIM_config_prescaler+0x32>
 63a:	66 30       	cpi	r22, 0x06	; 6
 63c:	e9 f4       	brne	.+58     	; 0x678 <TIM_config_prescaler+0x60>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR0B = TCCR0B |  _BV(CS02);
 63e:	85 b5       	in	r24, 0x25	; 37
 640:	84 60       	ori	r24, 0x04	; 4
 642:	13 c0       	rjmp	.+38     	; 0x66a <TIM_config_prescaler+0x52>
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (presc_val) {
            case TIM_PRESC_1:
                /* 001 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 644:	85 b5       	in	r24, 0x25	; 37
 646:	8b 7f       	andi	r24, 0xFB	; 251
 648:	10 c0       	rjmp	.+32     	; 0x66a <TIM_config_prescaler+0x52>
                TCCR0B = TCCR0B |  _BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_256:
                /* 100 */
                TCCR0B = TCCR0B |  _BV(CS02);
 64a:	85 b5       	in	r24, 0x25	; 37
 64c:	84 60       	ori	r24, 0x04	; 4
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR0B = TCCR0B & ~_BV(CS02);
 64e:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS01);
 650:	85 b5       	in	r24, 0x25	; 37
 652:	8d 7f       	andi	r24, 0xFD	; 253
                TCCR0B = TCCR0B |  _BV(CS00);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR0B = TCCR0B & ~_BV(CS02);
                TCCR0B = TCCR0B |  _BV(CS01);
 654:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS00);
 656:	85 b5       	in	r24, 0x25	; 37
 658:	8e 7f       	andi	r24, 0xFE	; 254
 65a:	85 bd       	out	0x25, r24	; 37
                break;
 65c:	08 95       	ret
            case TIM_PRESC_64:
                /* 011 */
                TCCR0B = TCCR0B & ~_BV(CS02);
 65e:	85 b5       	in	r24, 0x25	; 37
 660:	8b 7f       	andi	r24, 0xFB	; 251
 662:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS01);
 664:	85 b5       	in	r24, 0x25	; 37
 666:	82 60       	ori	r24, 0x02	; 2
 668:	03 c0       	rjmp	.+6      	; 0x670 <TIM_config_prescaler+0x58>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR0B = TCCR0B |  _BV(CS02);
 66a:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B & ~_BV(CS01);
 66c:	85 b5       	in	r24, 0x25	; 37
 66e:	8d 7f       	andi	r24, 0xFD	; 253
 670:	85 bd       	out	0x25, r24	; 37
                TCCR0B = TCCR0B |  _BV(CS00);
 672:	85 b5       	in	r24, 0x25	; 37
 674:	81 60       	ori	r24, 0x01	; 1
 676:	f1 cf       	rjmp	.-30     	; 0x65a <TIM_config_prescaler+0x42>
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR0B = TCCR0B & ~_BV(CS02);
 678:	85 b5       	in	r24, 0x25	; 37
 67a:	8b 7f       	andi	r24, 0xFB	; 251
 67c:	e8 cf       	rjmp	.-48     	; 0x64e <TIM_config_prescaler+0x36>
                TCCR0B = TCCR0B & ~_BV(CS01);
                TCCR0B = TCCR0B & ~_BV(CS00);
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	09 f0       	breq	.+2      	; 0x684 <TIM_config_prescaler+0x6c>
 682:	44 c0       	rjmp	.+136    	; 0x70c <TIM_config_prescaler+0xf4>
        // TODO: Set prescaler values for Timer/Counter1
        switch (presc_val) {
 684:	63 30       	cpi	r22, 0x03	; 3
 686:	d1 f0       	breq	.+52     	; 0x6bc <TIM_config_prescaler+0xa4>
 688:	68 f4       	brcc	.+26     	; 0x6a4 <TIM_config_prescaler+0x8c>
 68a:	66 23       	and	r22, r22
 68c:	99 f0       	breq	.+38     	; 0x6b4 <TIM_config_prescaler+0x9c>
 68e:	61 30       	cpi	r22, 0x01	; 1
 690:	69 f5       	brne	.+90     	; 0x6ec <TIM_config_prescaler+0xd4>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B |  _BV(CS10);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 692:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 696:	8b 7f       	andi	r24, 0xFB	; 251
 698:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS11);
 69c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6a0:	82 60       	ori	r24, 0x02	; 2
 6a2:	2c c0       	rjmp	.+88     	; 0x6fc <TIM_config_prescaler+0xe4>
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
        // TODO: Set prescaler values for Timer/Counter1
        switch (presc_val) {
 6a4:	65 30       	cpi	r22, 0x05	; 5
 6a6:	99 f0       	breq	.+38     	; 0x6ce <TIM_config_prescaler+0xb6>
 6a8:	66 30       	cpi	r22, 0x06	; 6
 6aa:	01 f5       	brne	.+64     	; 0x6ec <TIM_config_prescaler+0xd4>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR1B = TCCR1B |  _BV(CS12);
 6ac:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6b0:	84 60       	ori	r24, 0x04	; 4
 6b2:	11 c0       	rjmp	.+34     	; 0x6d6 <TIM_config_prescaler+0xbe>
    else if (timer_name == TIM1) {
        // TODO: Set prescaler values for Timer/Counter1
        switch (presc_val) {
            case TIM_PRESC_1:
                /* 001 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 6b4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6b8:	8b 7f       	andi	r24, 0xFB	; 251
 6ba:	0d c0       	rjmp	.+26     	; 0x6d6 <TIM_config_prescaler+0xbe>
                TCCR1B = TCCR1B |  _BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_64:
                /* 011 */
                TCCR1B = TCCR1B & ~_BV(CS12);
 6bc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6c0:	8b 7f       	andi	r24, 0xFB	; 251
 6c2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS11);
 6c6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6ca:	82 60       	ori	r24, 0x02	; 2
 6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <TIM_config_prescaler+0xc8>
                TCCR1B = TCCR1B |  _BV(CS10);
                break;
            case TIM_PRESC_256:
                /* 100 */
                TCCR1B = TCCR1B |  _BV(CS12);
 6ce:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6d2:	84 60       	ori	r24, 0x04	; 4
 6d4:	0e c0       	rjmp	.+28     	; 0x6f2 <TIM_config_prescaler+0xda>
                TCCR1B = TCCR1B & ~_BV(CS11);
                TCCR1B = TCCR1B & ~_BV(CS10);
                break;
            case TIM_PRESC_1024:
                /* 101 */
                TCCR1B = TCCR1B |  _BV(CS12);
 6d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS11);
 6da:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6de:	8d 7f       	andi	r24, 0xFD	; 253
 6e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B |  _BV(CS10);
 6e4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6e8:	81 60       	ori	r24, 0x01	; 1
 6ea:	0d c0       	rjmp	.+26     	; 0x706 <TIM_config_prescaler+0xee>
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR1B = TCCR1B & ~_BV(CS12);
 6ec:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6f0:	8b 7f       	andi	r24, 0xFB	; 251
 6f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS11);
 6f6:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 6fa:	8d 7f       	andi	r24, 0xFD	; 253
 6fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
                TCCR1B = TCCR1B & ~_BV(CS10);
 700:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 704:	8e 7f       	andi	r24, 0xFE	; 254
 706:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 70a:	08 95       	ret
        }
    }
    /* Timer/Counter2 */
    else {
        // TODO: Set prescaler values for Timer/Counter2
        switch (presc_val) {
 70c:	62 30       	cpi	r22, 0x02	; 2
 70e:	d1 f0       	breq	.+52     	; 0x744 <TIM_config_prescaler+0x12c>
 710:	68 f4       	brcc	.+26     	; 0x72c <TIM_config_prescaler+0x114>
 712:	66 23       	and	r22, r22
 714:	99 f0       	breq	.+38     	; 0x73c <TIM_config_prescaler+0x124>
 716:	61 30       	cpi	r22, 0x01	; 1
 718:	69 f5       	brne	.+90     	; 0x774 <TIM_config_prescaler+0x15c>
                TCCR2B = TCCR2B & ~_BV(CS21);
                TCCR2B = TCCR2B |  _BV(CS20);
                break;
            case TIM_PRESC_8:
                /* 010 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 71a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 71e:	8b 7f       	andi	r24, 0xFB	; 251
 720:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS21);
 724:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 728:	82 60       	ori	r24, 0x02	; 2
 72a:	2c c0       	rjmp	.+88     	; 0x784 <TIM_config_prescaler+0x16c>
        }
    }
    /* Timer/Counter2 */
    else {
        // TODO: Set prescaler values for Timer/Counter2
        switch (presc_val) {
 72c:	63 30       	cpi	r22, 0x03	; 3
 72e:	99 f0       	breq	.+38     	; 0x756 <TIM_config_prescaler+0x13e>
 730:	64 30       	cpi	r22, 0x04	; 4
 732:	01 f5       	brne	.+64     	; 0x774 <TIM_config_prescaler+0x15c>
                TCCR2B = TCCR2B & ~_BV(CS21);
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_128:
                /* 101 */
                TCCR2B = TCCR2B |  _BV(CS22);
 734:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 738:	84 60       	ori	r24, 0x04	; 4
 73a:	11 c0       	rjmp	.+34     	; 0x75e <TIM_config_prescaler+0x146>
    else {
        // TODO: Set prescaler values for Timer/Counter2
        switch (presc_val) {
            case TIM_PRESC_1:
                /* 001 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 73c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 740:	8b 7f       	andi	r24, 0xFB	; 251
 742:	0d c0       	rjmp	.+26     	; 0x75e <TIM_config_prescaler+0x146>
                TCCR2B = TCCR2B |  _BV(CS21);
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_32:
                /* 011 */
                TCCR2B = TCCR2B & ~_BV(CS22);
 744:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 748:	8b 7f       	andi	r24, 0xFB	; 251
 74a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS21);
 74e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 752:	82 60       	ori	r24, 0x02	; 2
 754:	09 c0       	rjmp	.+18     	; 0x768 <TIM_config_prescaler+0x150>
                TCCR2B = TCCR2B |  _BV(CS20);
                break;
            case TIM_PRESC_64:
                /* 100 */
                TCCR2B = TCCR2B |  _BV(CS22);
 756:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 75a:	84 60       	ori	r24, 0x04	; 4
 75c:	0e c0       	rjmp	.+28     	; 0x77a <TIM_config_prescaler+0x162>
                TCCR2B = TCCR2B & ~_BV(CS21);
                TCCR2B = TCCR2B & ~_BV(CS20);
                break;
            case TIM_PRESC_128:
                /* 101 */
                TCCR2B = TCCR2B |  _BV(CS22);
 75e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS21);
 762:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 766:	8d 7f       	andi	r24, 0xFD	; 253
 768:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B |  _BV(CS20);
 76c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 770:	81 60       	ori	r24, 0x01	; 1
 772:	0d c0       	rjmp	.+26     	; 0x78e <TIM_config_prescaler+0x176>
                break;
            default:
                /* 000: No clock source (Timer/Counter stopped) */
                TCCR2B = TCCR2B & ~_BV(CS22);
 774:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 778:	8b 7f       	andi	r24, 0xFB	; 251
 77a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS21);
 77e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 782:	8d 7f       	andi	r24, 0xFD	; 253
 784:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
                TCCR2B = TCCR2B & ~_BV(CS20);
 788:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 78c:	8e 7f       	andi	r24, 0xFE	; 254
 78e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 792:	08 95       	ret

00000794 <TIM_config_interrupt>:
/*--------------------------------------------------------------------*/
void TIM_config_interrupt(uint8_t timer_name,
                          uint8_t interr_mode)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
 794:	81 11       	cpse	r24, r1
 796:	0c c0       	rjmp	.+24     	; 0x7b0 <TIM_config_interrupt+0x1c>
        switch (interr_mode) {
            case TIM_OVERFLOW_ENABLE:
                TIMSK0 = TIMSK0 | _BV(TOIE0);
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
 798:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
void TIM_config_interrupt(uint8_t timer_name,
                          uint8_t interr_mode)
{
    /* Timer/Counter0 */
    if (timer_name == TIM0) {
        switch (interr_mode) {
 79c:	66 23       	and	r22, r22
 79e:	21 f0       	breq	.+8      	; 0x7a8 <TIM_config_interrupt+0x14>
 7a0:	61 30       	cpi	r22, 0x01	; 1
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <TIM_config_interrupt+0x14>
            case TIM_OVERFLOW_ENABLE:
                TIMSK0 = TIMSK0 | _BV(TOIE0);
 7a4:	81 60       	ori	r24, 0x01	; 1
 7a6:	01 c0       	rjmp	.+2      	; 0x7aa <TIM_config_interrupt+0x16>
            case TIM_OVERFLOW_DISABLE:
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
                break;
            default:
                /* Disable overflow interrupt */
                TIMSK0 = TIMSK0 & ~_BV(TOIE0);
 7a8:	8e 7f       	andi	r24, 0xFE	; 254
 7aa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
 7ae:	08 95       	ret
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	59 f4       	brne	.+22     	; 0x7ca <TIM_config_interrupt+0x36>
        switch (interr_mode) {
            case TIM_OVERFLOW_ENABLE:
                TIMSK1 = TIMSK1 | _BV(TOIE1);
                break;
            case TIM_OVERFLOW_DISABLE:
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
 7b4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
        }
    }
    /* Timer/Counter1 */
    else if (timer_name == TIM1) {
        // TODO: Enable/disable interupt for Timer/Counter1
        switch (interr_mode) {
 7b8:	66 23       	and	r22, r22
 7ba:	21 f0       	breq	.+8      	; 0x7c4 <TIM_config_interrupt+0x30>
 7bc:	61 30       	cpi	r22, 0x01	; 1
 7be:	11 f4       	brne	.+4      	; 0x7c4 <TIM_config_interrupt+0x30>
            case TIM_OVERFLOW_ENABLE:
                TIMSK1 = TIMSK1 | _BV(TOIE1);
 7c0:	81 60       	ori	r24, 0x01	; 1
 7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <TIM_config_interrupt+0x32>
            case TIM_OVERFLOW_DISABLE:
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
                break;
            default:
                /* Disable overflow interrupt */
                TIMSK1 = TIMSK1 & ~_BV(TOIE1);
 7c4:	8e 7f       	andi	r24, 0xFE	; 254
 7c6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 7ca:	08 95       	ret

000007cc <SEG_toggle_clk>:

/*--------------------------------------------------------------------*/
void SEG_toggle_clk(void)
{
    /* TODO: Generate 2 us clock period */
    PORTD |= _BV(SEGMENT_CLK);
 7cc:	5f 9a       	sbi	0x0b, 7	; 11
 7ce:	85 e0       	ldi	r24, 0x05	; 5
 7d0:	8a 95       	dec	r24
 7d2:	f1 f7       	brne	.-4      	; 0x7d0 <SEG_toggle_clk+0x4>
 7d4:	00 00       	nop
    _delay_us(1);
    PORTD &= ~_BV(SEGMENT_CLK);
 7d6:	5f 98       	cbi	0x0b, 7	; 11
 7d8:	08 95       	ret

000007da <SEG_putc>:
    0b00000001};  // Position 3

/* Functions ---------------------------------------------------------*/
void SEG_putc(uint8_t digit,
              uint8_t position)
{
 7da:	cf 92       	push	r12
 7dc:	df 92       	push	r13
 7de:	ef 92       	push	r14
 7e0:	ff 92       	push	r15
 7e2:	0f 93       	push	r16
 7e4:	1f 93       	push	r17
 7e6:	cf 93       	push	r28
 7e8:	df 93       	push	r29
    uint8_t i;

    /* Read values from look-up tables */
    digit    = segment_digit[digit];
 7ea:	e8 2f       	mov	r30, r24
 7ec:	f0 e0       	ldi	r31, 0x00	; 0
 7ee:	ea 5f       	subi	r30, 0xFA	; 250
 7f0:	fe 4f       	sbci	r31, 0xFE	; 254
 7f2:	e0 80       	ld	r14, Z
    position = segment_position[position];
 7f4:	e6 2f       	mov	r30, r22
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	ee 5f       	subi	r30, 0xFE	; 254
 7fa:	fe 4f       	sbci	r31, 0xFE	; 254
 7fc:	00 81       	ld	r16, Z
 7fe:	c7 e0       	ldi	r28, 0x07	; 7
 800:	d0 e0       	ldi	r29, 0x00	; 0

    /* Put 1st byte to serial data */
    for (i = 0; i < 8; i++) {
        // TODO: Test and send 8 individual "digit" bits
        if ((_BV(7 - i) & digit) > 0)
 802:	cc 24       	eor	r12, r12
 804:	c3 94       	inc	r12
 806:	d1 2c       	mov	r13, r1
 808:	f1 2c       	mov	r15, r1
 80a:	c6 01       	movw	r24, r12
 80c:	0c 2e       	mov	r0, r28
 80e:	02 c0       	rjmp	.+4      	; 0x814 <SEG_putc+0x3a>
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	0a 94       	dec	r0
 816:	e2 f7       	brpl	.-8      	; 0x810 <SEG_putc+0x36>
 818:	8e 21       	and	r24, r14
 81a:	9f 21       	and	r25, r15
 81c:	89 2b       	or	r24, r25
 81e:	11 f0       	breq	.+4      	; 0x824 <SEG_putc+0x4a>
            GPIO_write(&PORTB, SEGMENT_DATA, 1);
 820:	41 e0       	ldi	r20, 0x01	; 1
 822:	01 c0       	rjmp	.+2      	; 0x826 <SEG_putc+0x4c>
        else
            GPIO_write(&PORTB, SEGMENT_DATA, 0);
 824:	40 e0       	ldi	r20, 0x00	; 0
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	85 e2       	ldi	r24, 0x25	; 37
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <GPIO_write>
        SEG_toggle_clk();
 830:	0e 94 e6 03 	call	0x7cc	; 0x7cc <SEG_toggle_clk>
 834:	21 97       	sbiw	r28, 0x01	; 1
 836:	48 f7       	brcc	.-46     	; 0x80a <SEG_putc+0x30>
 838:	c7 e0       	ldi	r28, 0x07	; 7
 83a:	d0 e0       	ldi	r29, 0x00	; 0
    }
    /* Put 2nd byte to serial data */
    for (i = 0; i < 8; i++) {
        // TODO: Test and send 8 individual "position" bits
        if ((_BV(7 - i) & position) > 1)
 83c:	ee 24       	eor	r14, r14
 83e:	e3 94       	inc	r14
 840:	f1 2c       	mov	r15, r1
 842:	10 e0       	ldi	r17, 0x00	; 0
 844:	c7 01       	movw	r24, r14
 846:	0c 2e       	mov	r0, r28
 848:	02 c0       	rjmp	.+4      	; 0x84e <SEG_putc+0x74>
 84a:	88 0f       	add	r24, r24
 84c:	99 1f       	adc	r25, r25
 84e:	0a 94       	dec	r0
 850:	e2 f7       	brpl	.-8      	; 0x84a <SEG_putc+0x70>
 852:	80 23       	and	r24, r16
 854:	91 23       	and	r25, r17
 856:	02 97       	sbiw	r24, 0x02	; 2
 858:	14 f0       	brlt	.+4      	; 0x85e <SEG_putc+0x84>
            GPIO_write(&PORTB, SEGMENT_DATA, 1);
 85a:	41 e0       	ldi	r20, 0x01	; 1
 85c:	01 c0       	rjmp	.+2      	; 0x860 <SEG_putc+0x86>
        else 
            GPIO_write(&PORTB, SEGMENT_DATA, 0);
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	85 e2       	ldi	r24, 0x25	; 37
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <GPIO_write>
        SEG_toggle_clk();
 86a:	0e 94 e6 03 	call	0x7cc	; 0x7cc <SEG_toggle_clk>
 86e:	21 97       	sbiw	r28, 0x01	; 1
 870:	48 f7       	brcc	.-46     	; 0x844 <SEG_putc+0x6a>
    }

    /* TODO: Generate 1 us latch pulse */
    PORTD |= _BV(SEGMENT_LATCH);
 872:	5c 9a       	sbi	0x0b, 4	; 11
 874:	25 e0       	ldi	r18, 0x05	; 5
 876:	2a 95       	dec	r18
 878:	f1 f7       	brne	.-4      	; 0x876 <SEG_putc+0x9c>
 87a:	00 00       	nop
    _delay_us(1);
    PORTD &= ~_BV(SEGMENT_LATCH);
 87c:	5c 98       	cbi	0x0b, 4	; 11
}
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	1f 91       	pop	r17
 884:	0f 91       	pop	r16
 886:	ff 90       	pop	r15
 888:	ef 90       	pop	r14
 88a:	df 90       	pop	r13
 88c:	cf 90       	pop	r12
 88e:	08 95       	ret

00000890 <rand4_asm>:
 890:	0f 93       	push	r16
 892:	1f 93       	push	r17
 894:	83 fb       	bst	r24, 3
 896:	00 f9       	bld	r16, 0
 898:	82 fb       	bst	r24, 2
 89a:	10 f9       	bld	r17, 0
 89c:	01 27       	eor	r16, r17
 89e:	88 0f       	add	r24, r24
 8a0:	00 95       	com	r16
 8a2:	00 fb       	bst	r16, 0
 8a4:	80 f9       	bld	r24, 0
 8a6:	8f 70       	andi	r24, 0x0F	; 15
 8a8:	1f 91       	pop	r17
 8aa:	0f 91       	pop	r16
 8ac:	08 95       	ret

000008ae <rand8_asm>:
 8ae:	0f 93       	push	r16
 8b0:	1f 93       	push	r17
 8b2:	87 fb       	bst	r24, 7
 8b4:	00 f9       	bld	r16, 0
 8b6:	85 fb       	bst	r24, 5
 8b8:	10 f9       	bld	r17, 0
 8ba:	01 27       	eor	r16, r17
 8bc:	84 fb       	bst	r24, 4
 8be:	10 f9       	bld	r17, 0
 8c0:	01 27       	eor	r16, r17
 8c2:	83 fb       	bst	r24, 3
 8c4:	10 f9       	bld	r17, 0
 8c6:	01 27       	eor	r16, r17
 8c8:	88 0f       	add	r24, r24
 8ca:	00 95       	com	r16
 8cc:	00 fb       	bst	r16, 0
 8ce:	80 f9       	bld	r24, 0
 8d0:	1f 91       	pop	r17
 8d2:	0f 91       	pop	r16
 8d4:	08 95       	ret

000008d6 <main>:
/* Main --------------------------------------------------------------*/
/* Generate a sequence of LFSR preudo-random values using 4- and 8-bit
 * structure. */
int main(void)
{
    uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU)); // 8N1
 8d6:	87 e6       	ldi	r24, 0x67	; 103
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	0e 94 1c 02 	call	0x438	; 0x438 <uart_init>

    /* Timer1
     * TODO: Enable overflow interrupt every 33 msec. */
    TIM_config_prescaler(TIM1, TIM_PRESC_8);
 8de:	61 e0       	ldi	r22, 0x01	; 1
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	0e 94 0c 03 	call	0x618	; 0x618 <TIM_config_prescaler>
    TIM_config_interrupt(TIM1, TIM_OVERFLOW_ENABLE);
 8e6:	61 e0       	ldi	r22, 0x01	; 1
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	0e 94 ca 03 	call	0x794	; 0x794 <TIM_config_interrupt>

    sei();
 8ee:	78 94       	sei
    uart_puts("\r\n---LFSR pseudo-random generator---\r\n");
 8f0:	87 e1       	ldi	r24, 0x17	; 23
 8f2:	91 e0       	ldi	r25, 0x01	; 1
 8f4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uart_puts>
 8f8:	ff cf       	rjmp	.-2      	; 0x8f8 <main+0x22>

000008fa <__itoa_ncheck>:
 8fa:	bb 27       	eor	r27, r27
 8fc:	4a 30       	cpi	r20, 0x0A	; 10
 8fe:	31 f4       	brne	.+12     	; 0x90c <__stack+0xd>
 900:	99 23       	and	r25, r25
 902:	22 f4       	brpl	.+8      	; 0x90c <__stack+0xd>
 904:	bd e2       	ldi	r27, 0x2D	; 45
 906:	90 95       	com	r25
 908:	81 95       	neg	r24
 90a:	9f 4f       	sbci	r25, 0xFF	; 255
 90c:	0c 94 89 04 	jmp	0x912	; 0x912 <__utoa_common>

00000910 <__utoa_ncheck>:
 910:	bb 27       	eor	r27, r27

00000912 <__utoa_common>:
 912:	fb 01       	movw	r30, r22
 914:	55 27       	eor	r21, r21
 916:	aa 27       	eor	r26, r26
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	aa 1f       	adc	r26, r26
 91e:	a4 17       	cp	r26, r20
 920:	10 f0       	brcs	.+4      	; 0x926 <__utoa_common+0x14>
 922:	a4 1b       	sub	r26, r20
 924:	83 95       	inc	r24
 926:	50 51       	subi	r21, 0x10	; 16
 928:	b9 f7       	brne	.-18     	; 0x918 <__utoa_common+0x6>
 92a:	a0 5d       	subi	r26, 0xD0	; 208
 92c:	aa 33       	cpi	r26, 0x3A	; 58
 92e:	08 f0       	brcs	.+2      	; 0x932 <__utoa_common+0x20>
 930:	a9 5d       	subi	r26, 0xD9	; 217
 932:	a1 93       	st	Z+, r26
 934:	00 97       	sbiw	r24, 0x00	; 0
 936:	79 f7       	brne	.-34     	; 0x916 <__utoa_common+0x4>
 938:	b1 11       	cpse	r27, r1
 93a:	b1 93       	st	Z+, r27
 93c:	11 92       	st	Z+, r1
 93e:	cb 01       	movw	r24, r22
 940:	0c 94 a2 04 	jmp	0x944	; 0x944 <strrev>

00000944 <strrev>:
 944:	dc 01       	movw	r26, r24
 946:	fc 01       	movw	r30, r24
 948:	67 2f       	mov	r22, r23
 94a:	71 91       	ld	r23, Z+
 94c:	77 23       	and	r23, r23
 94e:	e1 f7       	brne	.-8      	; 0x948 <strrev+0x4>
 950:	32 97       	sbiw	r30, 0x02	; 2
 952:	04 c0       	rjmp	.+8      	; 0x95c <strrev+0x18>
 954:	7c 91       	ld	r23, X
 956:	6d 93       	st	X+, r22
 958:	70 83       	st	Z, r23
 95a:	62 91       	ld	r22, -Z
 95c:	ae 17       	cp	r26, r30
 95e:	bf 07       	cpc	r27, r31
 960:	c8 f3       	brcs	.-14     	; 0x954 <strrev+0x10>
 962:	08 95       	ret

00000964 <_exit>:
 964:	f8 94       	cli

00000966 <__stop_program>:
 966:	ff cf       	rjmp	.-2      	; 0x966 <__stop_program>
